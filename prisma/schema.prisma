generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum EventInterval {
    WEEKLY                              @map("weekly")
    ONCE_EVERY_OTHER_WEEK               @map("once_every_other_week")
    MONTHLY                             @map("monthly")
    ONE_BEFORE_LAST_FRIDAY_OF_THE_MONTH @map("one_before_last_friday_of_the_month")

    @@map("event_interval")
}

enum Roles {
    AllRounder     @map("all_rounder")
    Healer         @map("healer")
    MeleeDPS       @map("melee_dps")
    MagicRangedDPS @map("magic_ranged_dps")
    PhysRangedDPS  @map("phys_ranged_dps")
    Tank           @map("tank")
    Absence        @map("absence")
    Bench          @map("bench")
    Late           @map("late")
    Tentative      @map("tentative")

    @@map("roles")
}

enum Jobs {
    AllRounder  @map("all_rounder")
    Paladin     @map("paladin")
    Warrior     @map("warrior")
    Dragoon     @map("dragoon")
    Monk        @map("monk")
    Bard        @map("bard")
    BlackMage   @map("black_mage")
    Summoner    @map("summoner")
    Scholar     @map("scholar")
    WhiteMage   @map("white_mage")
    Ninja       @map("ninja")
    DarkKnight  @map("dark_knight")
    Machinist   @map("machinist")
    Astrologian @map("astrologian")
    Samurai     @map("samurai")
    RedMage     @map("red_mage")
    BlueMage    @map("blue_mage")
    Gunbreaker  @map("gunbreaker")
    Dancer      @map("dancer")
    Reaper      @map("reaper")
    Sage        @map("sage")
    Viper       @map("viper")
    Pictomancer @map("pictomancer")

    @@map("jobs")
}

model EventManagers {
    id        String   @id @default(cuid())
    discordId String   @unique @map("discord_id")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("event_managers")
}

model VerifiedServers {
    id        String   @id @default(cuid())
    discordId String   @unique @map("discord_id")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("verified_servers")
}

model Event {
    id             String         @id @default(cuid())
    name           String
    duration       Int
    description    String?
    interval       EventInterval?
    leader         String
    discordEventId String?        @map("discord_event_id")
    roleToPing     String?        @map("role_to_ping")
    channelId      String         @map("channel_id")
    guildId        String         @map("guild_id")
    createdAt      DateTime       @default(now()) @map("created_at")
    updatedAt      DateTime       @updatedAt @map("updated_at")
    instance       EventInstance?

    @@map("events")
}

model EventInstance {
    id           String        @id @default(cuid())
    event        Event         @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    eventId      String        @unique @map("event_id")
    messageId    String?       @map("message_id")
    dateTime     DateTime      @map("date_time")
    participants Participant[]
    createdAt    DateTime      @default(now()) @map("created_at")
    updatedAt    DateTime      @updatedAt @map("updated_at")

    @@map("event_instances")
}

model Participant {
    id              String        @id @default(cuid())
    role            Roles
    job             Jobs?
    discordId       String        @map("discord_id")
    signupOrder     Int           @map("signup_order")
    eventInstanceId String        @map("event_instance_id")
    eventInstance   EventInstance @relation(fields: [eventInstanceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    createdAt       DateTime      @default(now()) @map("created_at")
    updatedAt       DateTime      @updatedAt @map("updated_at")

    @@unique([eventInstanceId, discordId])
    @@map("participants")
}
